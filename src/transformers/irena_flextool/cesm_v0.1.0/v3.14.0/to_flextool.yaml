# Configuration file to perform data transformation between two data formats.
# For each operation, first list tells the source or sources, second list target(s)
# and third list defines special operations. There can be multiple special operations performed in list order.
#
# Structure of each operation:
# name for the operation:
# - source class: source paramater  OR - source class (used to copy entities or to create parameters based on entities in which case target entities will get a parameter from 'value')
# - target class: target parameter  OR - target class (used to copy entities)
# - - order: [optional list of lists for dimension positions: separate list for each dimension in the target - each target dimension can pick dimension names from multiple source dimensions]
#   - rename:
#       source parameter value: target parameter value
#   - algebra: programmatically interpreted algebraic formula between two or more source parameters
#   - [multiply, divide, add or subtract]:
#       with: float

# Entities
balance-entities:
- balance
- node
storage-entities:
- storage
- node
commodity-entities:
- commodity
- - node
  - commodity
  - commodity.node:
      order: [[1], [1]]
unit-entities:
- unit
- unit
unit-to-node-entities:
- unit_to_node
- unit.outputNode:
    order: [[1], [2]]
- dimensions: [unit, node]
node-to-unit-entities:
- node_to_unit
- unit.inputNode:
    order: [[2], [1]]
- dimensions: [unit, node]
profile-entities:
- unit_to_node
- - profile:
      order: [[1, 2]]
  - unit.node.profile:
      order: [[1], [2], [1, 2]]
link-entities:
- link
- - connection:
      order: [[1, 2]]
  - connection.node.node:
      order: [[1, 2], [1], [2]]

# Parameters
# System
inflation_rate:
- system: inflation_rate
- model: discount_rate

# timeline: in function

# Solve pattern
solve_mode:
- solve_pattern: solve_mode
- solve: solve_mode
- rename:
    single_solve: single_solve

periods_invested:
- solve_pattern: periods_realise_investments
- solve: realised_invest_periods

periods_realised:
- solve_pattern: periods_realise_operations
- solve: realized_periods


# Nodes
annual_flow:
- balance: flow_annual
  storage: flow_annual
- node: annual_flow
flow_profile:
- balance: flow_profile
  storage: flow_profile
- node: inflow
- to_datatype:
    ts: table
flow-scaling-method:
- balance: flow_scaling_method
  storage: flow_scaling_method
- node: inflow_method
- rename:
    use_profile_directly: use_original
    scale_to_annual: scale_to_annual_flow
price_per_unit:
- commodity: price_per_unit
- commodity: price
storage existing:
- storage: storage_existing
- node: existing
storage capacity:
- storage: storage_capacity
- node: virtual_unitsize
storage invest-cost:
- storage: investment_cost
- node: invest_cost
- multiply:
    with: 0.001
storage_investment_method:
- storage: investment_method
- node: invest_method
- rename:
    not_allowed: not_allowed
    no_limits: invest_no_limit
storage_discount_rate:
- storage: discount_rate
- node: interest_rate
storage_payback_time:
- storage: payback_time
- node: lifetime
penalty_upward:
- storage: penalty_upward
  balance: penalty_upward
- node: penalty_up
penalty_downward:
- storage: penalty_downward
  balance: penalty_downward
- node: penalty_down
has_balance:
- [balance, storage]
- node: has_balance
- value: 'yes'
has_storage:
- storage
- node: has_storage
- value: 'yes'
profile_method:
- unit_to_node
- unit.node.profile: profile_method
- - order: [[1], [2], [1, 2]]
  - value: 'upper_limit'

# Units
conversion_method:
- unit: conversion_method
- unit: conversion_method
- rename:
    constant_efficiency: constant_efficiency
units_existing:
- unit: units_existing
- unit: existing
efficiency:
- unit: efficiency
- unit: efficiency
unit investment_method:
- unit: investment_method
- unit: invest_method
- rename:
    not_allowed: not_allowed
    no_limits: invest_no_limit
unit discount_rate:
- unit: discount_rate
- unit: interest_rate
unit payback_time:
- unit: payback_time
- unit: lifetime

# to from units
unit_to_node capacity:
- unit_to_node: capacity
- unit: virtual_unitsize
- - order:
      order: [[1]]
      aggregate: sum
unit_to_node investment_cost:
- unit_to_node: investment_cost
- unit: invest_cost
- - order:
      order: [[1]]
      aggregate: sum
unit_to_node other_operational_cost:
- unit_to_node: other_operational_cost
- unit.outputNode: other_operational_cost
- - dimensions: [unit, node]
  - order: [[1], [2]]
node_to_unit other_operational_cost:
- node_to_unit: other_operational_cost
- unit.inputNode: other_operational_cost
- - dimensions: [unit, node]
  - order: [[2], [1]]
unit_to_node profile_limit_upper:
- unit_to_node: profile_limit_upper
- profile: profile
- - order: [[1, 2]]
  - to_datatype:
      ts: table
  - dimensions: [unit, node]
#test-multiply:
#- node_to_unit: other_operational_cost
#  unit: efficiency
#- unit.inputNode: test
#- - algebra: "1*2"
#    match: [[2], [1]]
#  - order: [[2], [1]]

# Link
link efficiency:
- link: efficiency
- connection: efficiency
- order: [[1, 2]]
transfer_method:
- link: transfer_method
- connection: transfer_method
- order: [[1, 2]]
- rename:
    regular_linear: regular
link capacity:
- link: capacity
- connection: virtual_unitsize
- order: [[1, 2]]
link existing:
- link: links_existing
- connection: existing
- order: [[1, 2]]
link investment_cost:
- link: investment_cost
- connection: invest_cost
- order: [[1, 2]]
link investment_method:
- link: investment_method
- connection: invest_method
- order: [[1, 2]]
- rename:
    not_allowed: not_allowed
    no_limits: invest_no_limit
link discount_rate:
- link: discount_rate
- connection: interest_rate
- order: [[1, 2]]
link payback_time:
- link: payback_time
- connection: lifetime
- order: [[1, 2]]
