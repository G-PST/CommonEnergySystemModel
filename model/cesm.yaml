id: file:///cesm.yaml
name: cesm
default_prefix: cesm
prefixes:
  cesm: file:///cesm.yaml
  linkml: https://w3id.org/linkml/
  # qudt: http://qudt.org/schema/qudt/           # Core QUDT schema (classes like QuantityValue, Unit)
  unit: http://qudt.org/vocab/unit/            # Individual units (MegaW-HR, Meter, etc.)
  # qkind: http://qudt.org/vocab/quantitykind/   # Quantity kinds (Energy, Length, Mass, etc.)
imports:
  - linkml:types
default_range: string

# annotations:
  # time_dimensional:
    # tag: value
    # description: "Indicates this parameter has a time dimension aligned with the database timeline"

classes:
  Entity:
    abstract: true
    description: "Abstract top-level class that contains all other classes (except Database)."
    attributes:
        name:
            identifier: true
            required: true
            description: "User-facing unique name identifier."
            multivalued: false
        semantic_id:
            range: uriorcurie
            description: "Optional id for semantic web integration."
        alternative_names:
            multivalued: true
            description: "List of alternative names and aliases."
        description:
            description: "Description of the entity."

  Node:
    is_a: Entity
    abstract: true
    description: "Abstract class that contains all types of nodes"
    attributes:
      node_type:
        # designates_type: true
        range: node_type_enum
        description: "Limits allowed types: Balance, Storage, Commodity"

  Balance:
    is_a: Node
    description: "Nodes that maintain a balance between inputs and outputs in each time step, but do not have a storage."
    mixins:
      - HasFlow
      - HasPenalty

  Storage:
    is_a: Node
    description: "Nodes that include a state variable to represent storage. Also maintains balance between inputs and outputs including charging and discharging of the state."
    mixins:
      - HasFlow
      - HasPenalty
      - HasInvestments
    attributes:
      storage_capacity:
        range: float
        description: "Capacity of a single storage asset."
        annotations:
          qudt_unit: "unit:MegaW-HR"
      storages_existing:
        range: float
        description: "Number of pre-existing storage assets at the model start."
        annotations:
          qudt_unit: "unit:UNITLESS"
      investment_cost:
        range: float
        description: "Price (in currency_year denomination) per kWh."

  Commodity:
    is_a: Node
    description: "Nodes where the model can buy and sell commodities against an exogenous price."
    attributes:
      commodity_type:
        range: commodity_type_enum
        required: true
        description: "Type of a commodity"
      price_per_unit:
        range: float
        description: "Price (in currency_year denomination) per unit of the product being bought or sold."

  Unit:
    is_a: Entity
    description: "Units convert input(s) to output(s) using a ratio multiplier."
    mixins:
      - HasInvestments
    attributes:
      conversion_method:
        range: conversion_method_enum
        description: "Choose how the unit converts inputs to outputs"
      units_existing:
        range: float
        description: "Number of pre-existing conversion units at the model start."
        annotations:
          qudt_unit: "unit:UNITLESS"
    slots:
      - efficiency

  Port:
    is_a: Entity
    description: "Ports designates an input or an output between a unit and a node."
    abstract: true
    mixins:
      - HasProfiles
    attributes:
      source:
        range: Entity  # Will be overriden in the sub-class
        required: true
        description: "Name of the source entity (Unit or Node)."
        annotations:
            is_dimension: true
      sink:
        range: Entity  # Will be overriden in the sub-class
        required: true
        description: "Name of the sink entity (Unit or Node)."
        annotations:
            is_dimension: true
      capacity:
        range: float
        description: "Capacity of the port for a single unit."
        annotations:
          qudt_unit: "unit:MegaW"
      investment_cost:
        range: float
        description: "Price (in currency_year denomination) per kW."
      other_operational_cost:
        range: float
        description: "Cost (in currency_year denomination) per unit of the product flowing through"
    # unique_keys:
    #   source_sink:
    #     unique_key_slots:
    #       - source
    #       - sink

  Unit_to_node:
    is_a: Port
    description: "An output port from a unit to a node."
    slot_usage:
      source:
        range: Unit
        description: "Source unit of the unit_to_node port."
      sink:
        range: Node
        description: "Sink node of the unit_to_node port."


  Node_to_unit:
    is_a: Port
    description: "An input port from a node to a unit."
    slot_usage:
      source:
        range: Node
        description: "Source node of the node_to_unit port."
      sink:
        range: Unit
        description: "Sink unit of the node_to_unit port."

  Link:
    is_a: Entity
    description: "Connects two nodes."
    mixins:
      - HasInvestments
    slot_usage:
      efficiency:
        any_of:
          - range: float
          - range: EfficiencyValue
    slots:
      - efficiency
    attributes:
      node_A:
        range: Node
        required: true
        description: "First node of a bidirectional link"
        annotations:
            is_dimension: true
      node_B:
        range: Node
        required: true
        description: "Second node of a bidirectional link"
        annotations:
            is_dimension: true
      transfer_method:
        range: transfer_method_enum
        description: "How to transfer between the two links."
      capacity:
        range: float
        description: "Capacity of a single asset (flow or link)."
        annotations:
          qudt_unit: "unit:MegaW"
      links_existing:
        range: float
        description: "Number of pre-existing links at the model start"
        annotations:
          qudt_unit: "unit:UNITLESS"
      investment_cost:
        range: float
        description: "Price (in currency_year denomination) per kW."

  Period:
    is_a: Entity
    description: "The properties of the periods available for the model."
    attributes:
      years_represented:
        range: float
        description: "How many years the period represents before the next period in the solve. Used for discounting. Can be below one (multiple periods in one year)."

  Group:
    is_a: Entity
    description: "Groups allow to define constraints that affect multiple entities at once"
    attributes:
      group_type: 
        range: group_type_enum
        required: true
        description: "Choice of group type"

  Group_entity:
    is_a: Entity
    description: "Makes an entity to be a member of a group"
    attributes:
      group:
        range: Group
        required: true
        description: "Group name that the entity belongs to"
        annotations:
            is_dimension: true
      entity:
        range: Entity
        required: true
        description: "Entity name"
        annotations:
            is_dimension: true

  Solve_pattern:
    is_a: Entity
    description: "Defines the properties of each solve pattern."
    attributes:
      solve_mode:
        range: solve_mode_enum
        description: "Choice of solve process handled within the model."
      periods_realise_investments:
        range: Period
        multivalued: true
        list_elements_ordered: true
        description: "A list of periods from which the model will report investment results and possibly pass to the next solve."
      periods_realise_operations:
        range: Period
        multivalued: true
        list_elements_ordered: true
        description: "A list of periods from which the model will report investment results and possibly pass to the next solve."
      periods_additional_horizon:
        range: Period
        multivalued: true
        list_elements_ordered: true
        description: "A list of periods from which the model will report investment results and possibly pass to the next solve."
      start_time:
        range: string
        description: "Start time of the solve - needs to match a value in the timeline. Defaults to the start of the timeline."
        comments:
          - "String to keep the sample simple for now. Will be made to use ISO 8601 format datetime."
      duration:
        range: integer
        description:  "Duration of the solve in time steps. Defaults to full timeline."
        comments:
          - "Integer to keep the sample simple for now. Will be made to use ISO 8601 format duration."
        # range: string
        # pattern: "^P(?!$)((\\d+Y)|(\\d+\\.\\d+Y$))?((\\d+M)|(\\d+\\.\\d+M$))?((\\d+W)|(\\d+\\.\\d+W$))?((\\d+D)|(\\d+\\.\\d+D$))?(T(?=\\d)((\\d+H)|(\\d+\\.\\d+H$))?((\\d+M)|(\\d+\\.\\d+M$))?(\\d+(\\.\\d+)?S)?)??$"
        # description: "Duration of the solve in ISO 8601 format"
      time_resolution:
        range: integer
        description: "Time resolution the model should use. Multiples of the time resolution of the original data."
        comments:
          - "Integer to keep the sample simple for now. Will be made to use ISO 8601 format duration."
          - "Variable time resolution to be added later."
      next_solve:
        range: Solve_pattern
        description: "The next solve_pattern to be executed. If empty, the execution ends after the solve_pattern."
      contains_solve:
        range: Solve_pattern
        description: "A child solve_pattern to be executed inside of the parent solve_pattern."

  System:
    is_a: Entity
    description: "Parameters related to the whole system to be modelled. "
    attributes:
      solve_order:
        range: Solve_pattern
        multivalued: true
        list_elements_ordered: true
      inflation_rate:
        description: "Rate of inflation for the currency_year of the database."
        range: float
        annotations:
          qudt_unit: "unit:PERCENT"

  HasFlow:
    mixin: true
    description: "Mixin for flow (annual_flow, flow_profile) related properties."
    attributes:
      flow_annual:
        range: float
        annotations:
          qudt_unit: "unit:MegaW-HR"
        description: "Annual flow that can be used to scale the flow profile. Always positive - flow_profile defines the direction."
      flow_profile:
        any_of:
          - range: float
          - range: TimeSeriesValues
        multivalued: true
        annotations:
          qudt_unit: "unit:PERCENT"
          time_dimensional: true
        description: "Flow profile that can be scaled by flow_annual. Positive values are inflow and negative values outflow from the node."
      flow_scaling_method:
        range: flow_scaling_method_enum
        description: How to use flow_profile and flow_annual. Options are use_profile_directly, scale_to_annual.

  HasPenalty:
    mixin: true
    description: "Mixin for penalty related attributes (penalty_upward, penalty_downward)."
    attributes:
      penalty_upward:
        range: float
        description: "Creates the commodity out of nothing using a slack variable that causes a penalty of currency_year per unit of created stuff."
      penalty_downward:
        range: float
        description: "Destroys the commodity into nothingness using a slack variable that causes a penalty of currency_year per unit of destroyed stuff."

  HasInvestments:
    mixin: true
    description: "Mixin for investment related attributes."
    attributes:
      investment_method:
        range: investment_method_enum
        description: Choice of investment method.
      discount_rate:
        range: float
        description: Discount rate of the investment.
      payback_time:
        range: float
        description: Economic payback time of the investment. Used to annualize investments.

  HasProfiles:
    mixin: true
    description: "Mixin for profile related attributes."
    attributes:
      profile_limit_upper:
        any_of:
          - range: float
          - range: TimeSeriesValues
        multivalued: true
        annotations:
          time_dimensional: true
      profile_limit_lower:
        any_of:
          - range: float
          - range: TimeSeriesValues
        multivalued: true
        annotations:
          time_dimensional: true

  DirectionalValue:
    attributes:
      forward:
        range: float
        required: true
        description: The parameter is applied to the forward direction (Node_A --> Node_B).
      reverse:
        range: float
        required: true
        description: The parameter is applied to the backward direction (Node_B --> Node_A).
    description: To which direction the parameter value is applied for in a link.

  EfficiencyValue:
    union_of:
      - float
      - DirectionalValue
    description: "Valid formats for the efficiency parameter."

  Database:
    tree_root: true
    description: "Database properties and holder for classes available in the schema."
    attributes:
      id:
        identifier: true
        range: integer
        description: "Database level id to distuingish between database versions."
      timeline:
        range: datetime
        multivalued: true
        description: "Time steps for which data can be entered in the database. Used to validate input data."
      # entity:
      #   range: Entity
      #   multivalued: true
      #   inlined_as_list: true
      #   required: false
      balance:
        range: Balance
        multivalued: true
        inlined_as_list: true
        required: false
      storage:
        range: Storage
        multivalued: true
        inlined_as_list: true
        required: false
      commodity:
        range: Commodity
        multivalued: true
        inlined_as_list: true
        required: false
      unit:
        range: Unit
        multivalued: true
        inlined_as_list: true
        required: false
      node_to_unit:
        range: Node_to_unit
        multivalued: true
        inlined_as_list: true
        required: false
      unit_to_node:
        range: Unit_to_node
        multivalued: true
        inlined_as_list: true
        required: false
      link:
        range: Link
        multivalued: true
        inlined_as_list: true
        required: false
      group:
        range: Group
        multivalued: true
        inlined_as_list: true
        required: false
      group_entity:
        range: Group_entity
        multivalued: true
        inlined_as_list: true
        required: false
      solve_pattern:
        range: Solve_pattern
        multivalued: true
        inlined_as_list: true
        required: false
      system:
        range: System
        multivalued: true
        inlined_as_list: true
        required: false
    slots:
      - currency_year
      - entity

  TimeSeriesValues:
    description: "Array of values indexed by Database.timeline"

slots:
  entity:
    range: Entity
    multivalued: true
    description: "All entities in this database"
  currency_year:
    pattern: "^cur:[A-Z]{3}_\\d{4}$"  # e.g., "cur:USD_2023"
    description: "QUDT currency and reference year for all monetary values in the dataset"
    comments:
      - "Currency codes must exist in http://qudt.org/vocab/currency/"
      - "Validation requires external QUDT vocabulary check"
      - "Maybe LinkML could validate against external vocabulary, but perhaps not well supported yet."
  efficiency:
    range: float
    description: "Multiplier for turning inputs to outputs."
    annotations:
      qudt_unit: "unit:PERCENT"


enums:
  flow_scaling_method_enum:
    permissible_values:
      use_profile_directly:
        text: use_profile_directly
      scale_to_annual:
        text: scale_to_annual
    description: How to use flow_profile and flow_annual.

  conversion_method_enum:
    permissible_values:
      constant_efficiency:
        text: constant_efficiency
    description: "Choose how the unit converts inputs to outputs"

  transfer_method_enum:
    permissible_values:
      regular_linear:
        text: regular_linear
    description: "How to transfer between the two links."

  solve_mode_enum:
    permissible_values:
      single_solve:
        text: single_solve
    description: "Choice of solve process handled within the model."

  investment_method_enum:
    permissible_values:
      not_allowed:
        text: not_allowed
      no_limits:
        text: no_limits
    description: Choice of investment method.

  node_type_enum:
    permissible_values:
      Balance:
        meaning: cesm:Balance
      Storage:
        meaning: cesm:Storage
      Commodity:
        meaning: cesm:Commodity
    description: "Limits allowed node types: Balance, Storage, Commodity"

  commodity_type_enum:
    permissible_values:
      fuel:
        text: fuel
      emission:
        text: emission
    description: "Limits allowed commodity types"

  group_type_enum:
    permissible_values:
      node:
        description: Defines a group of nodes that have shared constraints.
      power_grid:
        description: Defines a group of balance nodes that form a synchronous power grid (these nodes can also have shared constraints).
      link:
        description: Defines a group of links that have shared constraints.
    description: "Limits allowed group types"